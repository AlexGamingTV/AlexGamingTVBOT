using Discord.WebSocket;
using System;
using System.Collections.Generic;
using System.Text;
using Discord.Commands;
using System.Reflection;
using System.Threading.Tasks;

namespace ConsoleApp1
{
	public class CommandHandler
	{
		private DiscordSocketClient _client;

		private CommandService _service;

		public async Task InitializeAsync(DiscordSocketClient client)
		{
			_client = client;

			_service = new CommandService();

			await _service.AddModulesAsync(Assembly.GetEntryAssembly());

			_client.MessageReceived += HandleCommandAsync;
		}

		private async Task HandleCommandAsync(SocketMessage s)
		{
			var msg = s as SocketUserMessage;
			if (msg == null) return;

			var context = new SocketCommandContext(_client, msg);

			int argPos = 0;
			if (msg.HasCharPrefix('!', ref argPos))
			{
				var result = await _service.ExecuteAsync(context, argPos);

				if (!result.IsSuccess && result.Error != CommandError.UnknownCommand)
				{

				}
			}
		}
	}
}
using System;
using Discord;
using Discord.WebSocket;
using System.Threading.Tasks;

namespace ConsoleApp1
{
	public class Program
	{
		static void Main(string[] args)
		=> new Program().StartAsync().GetAwaiter().GetResult();

		private DiscordSocketClient _client;

		private CommandHandler _handler;

		public async Task StartAsync()
		{
			_client = new DiscordSocketClient();

			new CommandHandler();

			await _client.LoginAsync(TokenType.Bot, "");

			await _client.StartAsync();

			_handler = new CommandHandler();
			
			await _handler.InitializeAsync(_client);

			await Task.Delay(-1);
		}

        }

}
